#include <stdio.h>
#include <stdlib.h>

//defining elements that will start and end recursion as the code goes.
//it is necessary that we do that since recursion is a function that 
//calls itself. thus we need to implement a start and finish point.

int Values(int A[], int start, int end, int number) {
    
    // an if else statement is used to prevent the code to keep running
    //or to prevent "infinite recursion"
    
   if(start>end) return -1;
   
   //formula on the line below helps find mid value by adding first and last 
   //inputs and then dividing by two
   
   int mid = (start+end)/2;
   
   //in this case the if else statement tests where our instance falls 
   //and then decides that "else" will take care of it but then using recursion
   
   //this fragment of the code also defines and rearranges the input in ascending order
   //by asking if a number is the exact middle value, if not then number might be moved
   //"up" or "down" to rearrange in ascending order.
   
   if( A[mid] == number )
       return mid;
   else if( number < A[mid] )
       Values(A, start, mid-1, number);
   else
       Values(A, mid+1, end, number);  

}

//below is the main function, printf and scan statements help the user input 
//each value, as well as choosing a size for the array.

void sort(int arr[],int n);

int main(int argc, char const *argv[])
{
int arr[4],n,i,j;
printf("Input the number of elements to store in the array: ");
scanf("%d",&i);

//the lines below asks for each element as long as the answer for the above 
//is not equal to 0

for(j=0;j<i;j++){
printf("element - %d: ",j);
scanf("%d",&arr[j]);
}

//last print and scan statements are supposed to ask which number is being 
//searched, then returning that value that we're calling "i" for this code.
printf("Input the number to search: ");
scanf("%d",&n);
sort(arr,i);
printf("Found number %d in index %d\n",n,Values(arr,0,i-1,n) );
return i;
}

//last fragment of code is the logic used to sort numbers in the array, and the number
//of elements to be sorted out. 

void sort(int arr[],int n){
int i,j;
for(i=0;i<n;i++){
for(j=i+1;j<n;j++){
if(arr[i]>arr[j]){
int temp = arr[i];
arr[i] = arr[j];
arr[j] = temp;
}
}
}
}
