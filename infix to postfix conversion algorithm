#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
typedef struct stackNode StackNode;
typedef StackNode *StackNodePtr;
struct stackNode {
   char data;
   struct stackNode *nextPtr;
};

//the following void function is used to convert infix to postfix notation,c is a character being used 
//to determine if it is an operator, integer "precedence" in this case is being used to determine if 
//operator 1 is greater,less than or equal to operator 2. 
void convertToPostfix( char infix[], char postfix[] );
int Operator( char c ); 
int precedence( char operator1, char operator2 );

//following void push pushes a value on the stack, and pop pops a value off the stack
//stacktop gives back top value of the stack without popping it, empty determines if the stack is empty 
//and printstack prints it
void push( StackNodePtr *topPtr, char value ); 
char pop( StackNodePtr *topPtr ); 
char stackTop( StackNodePtr topPtr ); 
int Empty( StackNodePtr topPtr ); 
void printStack( StackNodePtr topPtr );

//following initializes infix and postfix arrays
//then print and scan functions are going to give the answer
int main(void) {   
   char infix[200]; 
   char postfix[200];
   printf("Enter an infix expression: ");
   scanf("%s", &infix);
   printf("The infix expression is: \n");
   printf("%s\n", infix);
   convertToPostfix(infix, postfix);
   printf("The expression in postfix notation is: %s\n",postfix); 

//following are iterations through infix and postfix operators
}
void convertToPostfix( char infix[], char postfix[] ) {  
   int infixIndex=0; 
   int postfixIndex=0;

   StackNodePtr head = NULL; //initialise empty stack
   push(&head, '(');
   printStack(head);
   strcat(infix,")"); //append ")" onto infix
   while(Empty(head) == 1) { //stack not empty
       if(isdigit(infix[infixIndex])){ //is digit
           postfix[postfixIndex++] = infix[infixIndex++];
       }
       if(infix[infixIndex]=='(') { //is "("
           push(&head, infix[infixIndex++]);
           printStack(head);
       }
     
       if(Operator(infix[infixIndex])==1) {
           while((Operator(stackTop(head)) == 1) && ((precedence(stackTop(head), infix[infixIndex]) != -1))) { 
               postfix[postfixIndex++] = pop(&head); 
           }
           push(&head ,infix[infixIndex++]);
           printStack(head);
       }
       if(infix[infixIndex]==')') { //is ")"
           infixIndex++;
           while(stackTop(head) != '(') {
               postfix[postfixIndex++] = pop(&head);
               printStack(head);
           }
           pop(&head);
           printStack(head);
       }
   }
}

int Empty(StackNodePtr topPtr) {
   if(topPtr == NULL){
       return 0; 
   }else{
       return 1; 
   }
   //malloc being used to allocate memory and if statement for 
   //allocation succeeded
}
void push (StackNodePtr *topPtr, char value) {
   StackNodePtr snp;
   snp = malloc(sizeof(StackNode));
   if(snp != NULL) {
   snp->data = value;
   snp->nextPtr = *topPtr;
   *topPtr = snp;
   }
  //following moves topPtr to new top 
}
char pop( StackNodePtr *topPtr ) {
   StackNodePtr snp = *topPtr;
   char data = snp->data;
   *topPtr = (*topPtr)->nextPtr; //move topPtr to new top
   free(snp);
   return data;
   
   //if the following returns 1, then it is operator, -1 is not 
   //operator .
}
int Operator(char c) {
   if(c=='+' || c=='-' || c=='*' || c=='/' || c=='^' || c=='%') {
       return 1;
   }
   return -1; 
   
   //following compares operators + and -, then * and /
   //^ has the highest precedence
}
int precedence(char operator1, char operator2) {
   
   if(operator1 == '+' || operator1 == '-'){ 
       if(operator2 == '+' || operator2 == '-'){
           return 0;      
       }else{
           return -1;      
       }
   }else if(operator1 == '*' || operator1 == '/' || operator1 == '%'){ 
       if(operator2 == '+' || operator2 == '-'){
           return 1;      
       }else if(operator2 == '*' || operator2 == '/' || operator2 == '%'){
           return -0;      
       }else{
           return -1;      
       }
   }else if(operator1 == '^'){ 
       if(operator2 == '^'){
           return 0;  
       }else{
           return 1;      
       }
   }
}
char stackTop( StackNodePtr topPtr ) {
   if(topPtr != NULL){
       return topPtr -> data; 
   }
   
   //updates topPtr
}
void printStack( StackNodePtr topPtr ) {
   while(topPtr != NULL) {
       printf("%c\t", topPtr->data);
       topPtr=topPtr->nextPtr; 
   }
   printf("NULL \n");

}
